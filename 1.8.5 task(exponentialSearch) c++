#include <vector>
#include <iostream>
#include <algorithm>

// Бинарный поиск (вспомогательная функция)
int binarySearch(const std::vector<int>& arr, int left, int right, int target) {
    while (left <= right) {
        int mid = left + (right - left) / 2;
        
        if (arr[mid] == target) {
            return mid;
        } else if (arr[mid] < target) {
            left = mid + 1;
        } else {
            right = mid - 1;
        }
    }
    return -1;
}

int exponentialSearch(const std::vector<int>& arr, int target) {
    int n = arr.size();
    
    // Если массив пустой
    if (n == 0) return -1;
    
    // Если искомый элемент в начале
    if (arr[0] == target) return 0;
    
    // Экспоненциально увеличиваем границу поиска
    int i = 1;
    while (i < n && arr[i] <= target) {
        i *= 2;
    }
    
    // Вызываем бинарный поиск в найденном диапазоне
    return binarySearch(arr, i / 2, std::min(i, n - 1), target);
}

// Пример использования
int main() {
    std::vector<int> arr = {2, 3, 4, 10, 40, 45, 60, 70, 80, 90, 100};
    int target = 10;
    
    std::cout << "Массив: ";
    for (int num : arr) std::cout << num << " ";
    std::cout << std::endl;
    
    int result = exponentialSearch(arr, target);
    
    if (result != -1) {
        std::cout << "Элемент " << target << " найден на позиции " << result << std::endl;
    } else {
        std::cout << "Элемент " << target << " не найден" << std::endl;
    }
    
    return 0;
}
