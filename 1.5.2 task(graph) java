public class FloydWarshall {
    static final int INF = Integer.MAX_VALUE; // Представляем бесконечность

    public static void floydWarshall(int graph[][], int V) {
        int dist[][] = new int[V][V];

        // Инициализация матрицы расстояний
        for (int i = 0; i < V; i++) {
            for (int j = 0; j < V; j++) {
                dist[i][j] = graph[i][j];
            }
        }

        // Основной цикл алгоритма
        for (int k = 0; k < V; k++) { // Промежуточная вершина
            for (int i = 0; i < V; i++) { // Начальная вершина
                for (int j = 0; j < V; j++) { // Конечная вершина
                    // Если путь через k короче
                    if (dist[i][k] != INF && dist[k][j] != INF && dist[i][k] + dist[k][j] < dist[i][j]) {
                        dist[i][j] = dist[i][k] + dist[k][j];
                    }
                }
            }
        }

        // Вывод матрицы кратчайших путей
        printSolution(dist, V);
    }

    static void printSolution(int dist[][], int V) {
        System.out.println("Матрица кратчайших путей:");
        for (int i = 0; i < V; i++) {
            for (int j = 0; j < V; j++) {
                if (dist[i][j] == INF)
                    System.out.print("INF ");
                else
                    System.out.print(dist[i][j] + " ");
            }
            System.out.println();
        }
    }

    // Пример использования
    public static void main(String[] args) {
        int graph[][] = {
            {0, 5, INF, 10},
            {INF, 0, 3, INF},
            {INF, INF, 0, 1},
            {INF, INF, INF, 0}
        };
        int V = 4;
        floydWarshall(graph, V);
    }
}
